!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).HeicTo={})}(this,(function(e){"use strict";let t;const n=async e=>new Promise(((n,a)=>{(()=>{if(!t){WORKER_FILE_CONTENT;const e=new Blob(["import buildLibheif from LIB_HEIF_PATH;\n\nconst libheif = buildLibheif()\n\nconst decodeBuffer = async (buffer) => {\n  const decoder = new libheif.HeifDecoder();\n  const data = decoder.decode(buffer);\n\n  if (!data.length) {\n    throw new Error('HEIF image not found');\n  }\n\n  const image = data[0]\n\n  const width = image.get_width();\n  const height = image.get_height();\n\n  const whiteImage = new ImageData(width, height)\n  for (let i = 0; i < width * height; i++) {\n    whiteImage.data[i * 4 + 3] = 255;\n  }\n\n  const imageData = await new Promise((resolve, reject) => {\n    image.display(whiteImage, (displayData) => {\n      if (!displayData) {\n        return reject(new Error('HEIF processing error'));\n      }\n\n      resolve(displayData);\n    });\n  });\n\n  return imageData;\n};\n\nonmessage = async (message) => {\n\tconst id = message.data.id;\n\n  try {\n    const imageData = await decodeBuffer(message.data.buffer)\n    postMessage({ id, imageData, error: \"\" });\n  } catch (e) {\n\t\tpostMessage({\n\t\t\tid,\n\t\t\timageData: null,\n\t\t\terror: e && e.toString ? e.toString() : e,\n\t\t});\n  }\n};\n"],{type:"application/javascript"});t=new Worker(URL.createObjectURL(e)),t.onerror=e=>console.error("Worker error:",e)}})();const i=(Math.random()*(new Date).getTime()).toString(),r={id:i,buffer:e};t.postMessage(r);const o=e=>{if(e.data.id===i)return e.currentTarget.removeEventListener("message",o),e.data.error?a(e.data.error):n(e.data.imageData)};t.addEventListener("message",o)}));e.heicTo=async({blob:e,type:t,quality:a})=>{const i=await e.arrayBuffer(),r=await(async e=>{const t=await n(e),a=document.createElement("canvas");return a.width=t.width,a.height=t.height,a.getContext("2d").putImageData(t,0,0),a})(i);return await new Promise(((e,n)=>r.toBlob((t=>{null!=t?e(t):n("Can't convert canvas to blob.")}),t,a)))},e.isHeic=async e=>{const t=(await e.arrayBuffer()).slice(8,12);switch(new TextDecoder("utf-8").decode(t).replace("\0"," ").trim()){case"mif1":case"msf1":case"heic":case"heix":case"hevc":case"hevx":return!0}return!1},Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=heic-to.umd.js.map
