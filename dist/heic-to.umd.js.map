{"version":3,"file":"heic-to.umd.js","sources":["../src/index.js"],"sourcesContent":["const isHeic = async (file) => {\n  const buffer = await file.arrayBuffer()\n  const slicedBuffer = buffer.slice(8, 12)\n  const brandMajor = new TextDecoder('utf-8')\n    .decode(slicedBuffer)\n    .replace('\\0', ' ')\n    .trim();\n\n  switch (brandMajor) {\n    case 'mif1':\n      return true; // {ext: 'heic', mime: 'image/heif'};\n    case 'msf1':\n      return true; // {ext: 'heic', mime: 'image/heif-sequence'};\n    case 'heic':\n    case 'heix':\n      return true; // {ext: 'heic', mime: 'image/heic'};\n    case 'hevc':\n    case 'hevx':\n      return true; // {ext: 'heic', mime: 'image/heic-sequence'};\n  }\n\n  return false;\n};\n\n// Lazy-load worker to avoid initialization issues on load\nlet worker;\nconst loadWorker = () => {\n    if (!worker) {\n        const workerFileContent = WORKER_FILE_CONTENT\n        const workerBlob = new Blob([workerFileContent], {type: 'application/javascript'})\n        worker = new Worker(URL.createObjectURL(workerBlob))\n        worker.onerror = (error) => console.error('Worker error:', error)\n    }\n    return worker\n}\n\nconst decodeBuffer = async (buffer) => {\n\treturn new Promise((resolve, reject) => {\n    loadWorker()\n\t\tconst id = (Math.random() * new Date().getTime()).toString();\n\t\tconst message = { id, buffer };\n    worker.postMessage(message);\n    const handleEvent = (event) => {\n      if (event.data.id === id) {\n        event.currentTarget.removeEventListener(\"message\", handleEvent)\n        if (event.data.error) {\n          return reject(event.data.error);\n        }\n        return resolve(event.data.imageData);\n      }\n    }\n    worker.addEventListener(\"message\", handleEvent);\n\t});\n}\n\nconst encodeByCanvas = async (imageBuffer) => {\n  const imageData = await decodeBuffer(imageBuffer)\n\n  const canvas = document.createElement('canvas');\n  canvas.width = imageData.width;\n  canvas.height = imageData.height;\n\n  const ctx = canvas.getContext('2d')\n  ctx.putImageData(imageData, 0, 0)\n  return canvas;\n};\n\nconst heicTo = async ({blob, type, quality}) => {\n  const imageBuffer = await blob.arrayBuffer()\n  const canvas = await encodeByCanvas(imageBuffer);\n  return await new Promise((resolve, reject) => canvas.toBlob(blob => {\n    if (blob != null)\n      resolve(blob);\n    else\n      reject(`Can't convert canvas to blob.`);\n  }, type, quality));\n};\n\nexport {\n  isHeic,\n  heicTo\n}"],"names":["worker","decodeBuffer","async","buffer","Promise","resolve","reject","workerFileContent","WORKER_FILE_CONTENT","workerBlob","Blob","type","Worker","URL","createObjectURL","onerror","error","console","loadWorker","id","Math","random","Date","getTime","toString","message","postMessage","handleEvent","event","data","currentTarget","removeEventListener","imageData","addEventListener","blob","quality","imageBuffer","arrayBuffer","canvas","document","createElement","width","height","getContext","putImageData","encodeByCanvas","toBlob","file","slicedBuffer","slice","TextDecoder","decode","replace","trim"],"mappings":"8OAyBA,IAAIA,EACJ,MAUMC,EAAeC,MAAOC,GACpB,IAAIC,SAAQ,CAACC,EAASC,KAXX,MACf,IAAKN,EAAQ,CACT,MAAMO,EAAoBC,oBACpBC,EAAa,IAAIC,KAAK,CAACH,GAAoB,CAACI,KAAM,2BACxDX,EAAS,IAAIY,OAAOC,IAAIC,gBAAgBL,IACxCT,EAAOe,QAAWC,GAAUC,QAAQD,MAAM,gBAAiBA,EAC9D,CACMhB,EAKPkB,GACF,MAAMC,GAAMC,KAAKC,UAAW,IAAIC,MAAOC,WAAWC,WAC5CC,EAAU,CAAEN,KAAIhB,UACpBH,EAAO0B,YAAYD,GACnB,MAAME,EAAeC,IACnB,GAAIA,EAAMC,KAAKV,KAAOA,EAEpB,OADAS,EAAME,cAAcC,oBAAoB,UAAWJ,GAC/CC,EAAMC,KAAKb,MACNV,EAAOsB,EAAMC,KAAKb,OAEpBX,EAAQuB,EAAMC,KAAKG,UAC3B,EAEHhC,EAAOiC,iBAAiB,UAAWN,EAAY,aAgBpCzB,OAAQgC,OAAMvB,OAAMwB,cACjC,MAAMC,QAAoBF,EAAKG,cACzBC,OAdepC,OAAOkC,IAC5B,MAAMJ,QAAkB/B,EAAamC,GAE/BE,EAASC,SAASC,cAAc,UAMtC,OALAF,EAAOG,MAAQT,EAAUS,MACzBH,EAAOI,OAASV,EAAUU,OAEdJ,EAAOK,WAAW,MAC1BC,aAAaZ,EAAW,EAAG,GACxBM,CAAM,EAKQO,CAAeT,GACpC,aAAa,IAAIhC,SAAQ,CAACC,EAASC,IAAWgC,EAAOQ,QAAOZ,IAC9C,MAARA,EACF7B,EAAQ6B,GAER5B,EAAO,gCAAgC,GACxCK,EAAMwB,IAAS,WA3ELjC,MAAO6C,IACpB,MACMC,SADeD,EAAKV,eACEY,MAAM,EAAG,IAMrC,OALmB,IAAIC,YAAY,SAChCC,OAAOH,GACPI,QAAQ,KAAM,KACdC,QAGD,IAAK,OAEL,IAAK,OAEL,IAAK,OACL,IAAK,OAEL,IAAK,OACL,IAAK,OACH,OAAO,EAGX,OAAO,CAAK"}